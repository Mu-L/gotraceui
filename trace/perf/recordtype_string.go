// Code generated by "stringer -type RecordType"; DO NOT EDIT.

package main

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PERF_RECORD_MMAP-1]
	_ = x[PERF_RECORD_LOST-2]
	_ = x[PERF_RECORD_COMM-3]
	_ = x[PERF_RECORD_EXIT-4]
	_ = x[PERF_RECORD_THROTTLE-5]
	_ = x[PERF_RECORD_UNTHROTTLE-6]
	_ = x[PERF_RECORD_FORK-7]
	_ = x[PERF_RECORD_READ-8]
	_ = x[PERF_RECORD_SAMPLE-9]
	_ = x[PERF_RECORD_MMAP2-10]
	_ = x[PERF_RECORD_AUX-11]
	_ = x[PERF_RECORD_ITRACE_START-12]
	_ = x[PERF_RECORD_LOST_SAMPLES-13]
	_ = x[PERF_RECORD_SWITCH-14]
	_ = x[PERF_RECORD_SWITCH_CPU_WIDE-15]
	_ = x[PERF_RECORD_NAMESPACES-16]
	_ = x[PERF_RECORD_KSYMBOL-17]
	_ = x[PERF_RECORD_BPF_EVENT-18]
	_ = x[PERF_RECORD_CGROUP-19]
	_ = x[PERF_RECORD_TEXT_POKE-20]
	_ = x[PERF_RECORD_AUX_OUTPUT_HW_ID-21]
	_ = x[PERF_RECORD_HEADER_ATTR-64]
	_ = x[PERF_RECORD_HEADER_EVENT_TYPE-65]
	_ = x[PERF_RECORD_HEADER_TRACING_DATA-66]
	_ = x[PERF_RECORD_HEADER_BUILD_ID-67]
	_ = x[PERF_RECORD_FINISHED_ROUND-68]
	_ = x[PERF_RECORD_ID_INDEX-69]
	_ = x[PERF_RECORD_AUXTRACE_INFO-70]
	_ = x[PERF_RECORD_AUXTRACE-71]
	_ = x[PERF_RECORD_AUXTRACE_ERROR-72]
	_ = x[PERF_RECORD_THREAD_MAP-73]
	_ = x[PERF_RECORD_CPU_MAP-74]
	_ = x[PERF_RECORD_STAT_CONFIG-75]
	_ = x[PERF_RECORD_STAT-76]
	_ = x[PERF_RECORD_STAT_ROUND-77]
	_ = x[PERF_RECORD_EVENT_UPDATE-78]
	_ = x[PERF_RECORD_TIME_CONV-79]
	_ = x[PERF_RECORD_HEADER_FEATURE-80]
	_ = x[PERF_RECORD_COMPRESSED-81]
	_ = x[PERF_RECORD_FINISHED_INIT-82]
}

const (
	_RecordType_name_0 = "PERF_RECORD_MMAPPERF_RECORD_LOSTPERF_RECORD_COMMPERF_RECORD_EXITPERF_RECORD_THROTTLEPERF_RECORD_UNTHROTTLEPERF_RECORD_FORKPERF_RECORD_READPERF_RECORD_SAMPLEPERF_RECORD_MMAP2PERF_RECORD_AUXPERF_RECORD_ITRACE_STARTPERF_RECORD_LOST_SAMPLESPERF_RECORD_SWITCHPERF_RECORD_SWITCH_CPU_WIDEPERF_RECORD_NAMESPACESPERF_RECORD_KSYMBOLPERF_RECORD_BPF_EVENTPERF_RECORD_CGROUPPERF_RECORD_TEXT_POKEPERF_RECORD_AUX_OUTPUT_HW_ID"
	_RecordType_name_1 = "PERF_RECORD_HEADER_ATTRPERF_RECORD_HEADER_EVENT_TYPEPERF_RECORD_HEADER_TRACING_DATAPERF_RECORD_HEADER_BUILD_IDPERF_RECORD_FINISHED_ROUNDPERF_RECORD_ID_INDEXPERF_RECORD_AUXTRACE_INFOPERF_RECORD_AUXTRACEPERF_RECORD_AUXTRACE_ERRORPERF_RECORD_THREAD_MAPPERF_RECORD_CPU_MAPPERF_RECORD_STAT_CONFIGPERF_RECORD_STATPERF_RECORD_STAT_ROUNDPERF_RECORD_EVENT_UPDATEPERF_RECORD_TIME_CONVPERF_RECORD_HEADER_FEATUREPERF_RECORD_COMPRESSEDPERF_RECORD_FINISHED_INIT"
)

var (
	_RecordType_index_0 = [...]uint16{0, 16, 32, 48, 64, 84, 106, 122, 138, 156, 173, 188, 212, 236, 254, 281, 303, 322, 343, 361, 382, 410}
	_RecordType_index_1 = [...]uint16{0, 23, 52, 83, 110, 136, 156, 181, 201, 227, 249, 268, 291, 307, 329, 353, 374, 400, 422, 447}
)

func (i RecordType) String() string {
	switch {
	case 1 <= i && i <= 21:
		i -= 1
		return _RecordType_name_0[_RecordType_index_0[i]:_RecordType_index_0[i+1]]
	case 64 <= i && i <= 82:
		i -= 64
		return _RecordType_name_1[_RecordType_index_1[i]:_RecordType_index_1[i+1]]
	default:
		return "RecordType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
